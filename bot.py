import logging
from typing import Dict
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler, CallbackQueryHandler
import requests

from config import CONFIG

BOT_TOKEN = "7446284006:AAGoq3Lh-aIw__XuQ4hNuaFuLD6Z220I2xo"
API_URL = "http://localhost:8000"

SELECTING_ACTION, SELECTING_LINE, SELECTING_STATION, SELECTING_END_STATION = range(4)

user_cities: Dict[int, str] = {}
user_data_cache: Dict[int, Dict] = {}

CITY_LINES = {
    "nsk": {
        "–ö—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è": ["–ó–∞–µ–ª—å—Ü–æ–≤—Å–∫–∞—è", "–ì–∞–≥–∞—Ä–∏–Ω—Å–∫–∞—è", "–ö—Ä–∞—Å–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç", "–ü–ª–æ—â–∞–¥—å –õ–µ–Ω–∏–Ω–∞","–û–∫—Ç—è–±—Ä—å—Å–∫–∞—è", "–†–µ—á–Ω–æ–π –≤–æ–∫–∑–∞–ª", "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è", "–°—Ç—É–¥–µ–Ω—Ç—á–µ—Å–∫–∞—è", "–ü–ª–æ—â–∞–¥—å –ú–∞—Ä–∫—Å–∞"],
        "–ó–µ–ª–µ–Ω–∞—è –ª–∏–Ω–∏—è": ["–ü–ª–æ—â–∞–¥—å –ì–∞—Ä–∏–Ω–∞-–ú–∏—Ö–∞–π–ª–æ–≤—Å–∫–æ–≥–æ", "–°–∏–±–∏—Ä—Å–∫–∞—è", "–ú–∞—Ä—à–∞–ª–∞ –ü–æ–∫—Ä—ã—à–∫–∏–Ω–∞","–ë–µ—Ä—ë–∑–æ–≤–∞—è —Ä–æ—â–∞", "–ó–æ–ª–æ—Ç–∞—è –Ω–∏–≤–∞"]
    },
    "spb": {
        "–ö–∏—Ä–æ–≤—Å–∫–æ-–í—ã–±–æ—Ä–≥—Å–∫–∞—è (–∫—Ä–∞—Å–Ω–∞—è)": ["–î–µ–≤—è—Ç–∫–∏–Ω–æ", "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç", "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è",
                                        "–ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è", "–ü–ª–æ—â–∞–¥—å –ú—É–∂–µ—Å—Ç–≤–∞", "–õ–µ—Å–Ω–∞—è",
                                        "–í—ã–±–æ—Ä–≥—Å–∫–∞—è", "–ü–ª–æ—â–∞–¥—å –õ–µ–Ω–∏–Ω–∞", "–ß–µ—Ä–Ω—ã—à–µ–≤—Å–∫–∞—è",
                                        "–ü–ª–æ—â–∞–¥—å –í–æ—Å—Å—Ç–∞–Ω–∏—è", "–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è", "–ü—É—à–∫–∏–Ω—Å–∫–∞—è",
                                        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç 1", "–ë–∞–ª—Ç–∏–π—Å–∫–∞—è", "–ù–∞—Ä–≤—Å–∫–∞—è",
                                        "–ö–∏—Ä–æ–≤—Å–∫–∏–π –∑–∞–≤–æ–¥", "–ê–≤—Ç–æ–≤–æ", "–õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç",
                                        "–ü—Ä–æ—Å–ø–µ–∫—Ç –í–µ—Ç–µ—Ä–∞–Ω–æ–≤"],
        "–ú–æ—Å–∫–æ–≤—Å–∫–æ-–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∞—è (—Å–∏–Ω—è—è)": ["–ü–∞—Ä–Ω–∞—Å", "–ü—Ä–æ—Å–ø–µ–∫—Ç –ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è", "–û–∑–µ—Ä–∫–∏",
                                           "–£–¥–µ–ª—å–Ω–∞—è", "–ü–∏–æ–Ω–µ—Ä—Å–∫–∞—è", "–ß—ë—Ä–Ω–∞—è —Ä–µ—á–∫–∞",
                                           "–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∞—è", "–ì–æ—Ä—å–∫–æ–≤—Å–∫–∞—è", "–ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç",
                                           "–°–µ–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç 2",
                                           "–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∞—è", "–ú–æ—Å–∫–æ–≤—Å–∫–∏–µ –≤–æ—Ä–æ—Ç–∞", "–≠–ª–µ–∫—Ç—Ä–æ—Å–∏–ª–∞",
                                           "–ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è", "–ó–≤—ë–∑–¥–Ω–∞—è", "–ö—É–ø—á–∏–Ω–æ"],
        "–ù–µ–≤—Å–∫–æ-–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∞—è (–∑–µ–ª—ë–Ω–∞—è)": ["–ë–µ–≥–æ–≤–∞—è", "–ó–µ–Ω–∏—Ç", "–ü—Ä–∏–º–æ—Ä—Å–∫–∞—è",
                                             "–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∞—è", "–ì–æ—Å—Ç–∏–Ω—ã–π –¥–≤–æ—Ä", "–ú–∞—è–∫–æ–≤—Å–∫–∞—è",
                                             "–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 1", "–ï–ª–∏–∑–∞—Ä–æ–≤—Å–∫–∞—è",
                                             "–õ–æ–º–æ–Ω–æ—Å–æ–≤—Å–∫–∞—è", "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è", "–û–±—É—Ö–æ–≤–æ", "–†—ã–±–∞—Ü–∫–æ–µ"],
        "–ü—Ä–∞–≤–æ–±–µ—Ä–µ–∂–Ω–∞—è (–æ—Ä–∞–Ω–∂–µ–≤–∞—è)": ["–°–ø–∞—Å—Å–∫–∞—è", "–î–æ—Å—Ç–æ–µ–≤—Å–∫–∞—è", "–õ–∏–≥–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç",
                                     "–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 2", "–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∞—è",
                                     "–õ–∞–¥–æ–∂—Å–∫–∞—è", "–ü—Ä–æ—Å–ø–µ–∫—Ç –ë–æ–ª—å—à–µ–≤–∏–∫–æ–≤", "–£–ª–∏—Ü–∞ –î—ã–±–µ–Ω–∫–æ"],
        "–§—Ä—É–Ω–∑–µ–Ω—Å–∫–æ-–ü—Ä–∏–º–æ—Ä—Å–∫–∞—è (—Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è)": ["–ö–æ–º–µ–Ω–¥–∞–Ω—Ç—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç", "–°—Ç–∞—Ä–∞—è –î–µ—Ä–µ–≤–Ω—è",
                                              "–ö—Ä–µ—Å—Ç–æ–≤—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤", "–ß–∫–∞–ª–æ–≤—Å–∫–∞—è", "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è",
                                              "–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∞—è", "–°–∞–¥–æ–≤–∞—è", "–ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥—Å–∫–∞—è",
                                              "–û–±–≤–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª", "–í–æ–ª–∫–æ–≤—Å–∫–∞—è", "–ë—É—Ö–∞—Ä–µ—Å—Ç—Å–∫–∞—è",
                                              "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è", "–ü—Ä–æ—Å–ø–µ–∫—Ç –°–ª–∞–≤—ã", "–î—É–Ω–∞–π—Å–∫–∞—è",
                                              "–®—É—à–∞—Ä—ã"]
    }
}

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


async def start(update: Update) -> int:
    user_id = update.effective_user.id
    user_cities[user_id] = "nsk"

    keyboard = [
        ["üöá –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
        ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–µ—Ç—Ä–æ! üöá\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è –ø—É—Ç–∏ –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏ –º–µ—Ç—Ä–æ.\n"
        f"–¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {get_city_name(user_cities[user_id])}",
        reply_markup=reply_markup
    )

    return SELECTING_ACTION


async def calculate_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    city = user_cities.get(user_id, "nsk")

    lines = list(CITY_LINES[city].keys())
    keyboard = []

    for i in range(0, len(lines), 2):
        row = lines[i:i + 2]
        keyboard.append(row)

    keyboard.append(["‚Ü©Ô∏è –ù–∞–∑–∞–¥"])

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–Ω–∏—é –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏:",
        reply_markup=reply_markup
    )

    context.user_data['step'] = 'select_start_line'
    return SELECTING_LINE


async def handle_line_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    city = user_cities.get(user_id, "nsk")
    selected_line = update.message.text

    if selected_line == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        return await show_main_menu(update, context)

    if selected_line not in CITY_LINES[city]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª–∏–Ω–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return SELECTING_LINE

    if context.user_data['step'] == 'select_start_line':
        context.user_data['start_line'] = selected_line
        next_step = SELECTING_STATION
        message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–Ω—Ü–∏—é:"
    else:
        context.user_data['end_line'] = selected_line
        next_step = SELECTING_END_STATION
        message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é —Å—Ç–∞–Ω—Ü–∏—é:"

    stations = CITY_LINES[city][selected_line]
    keyboard = []

    for i in range(0, len(stations), 2):
        row = stations[i:i + 2]
        keyboard.append(row)

    keyboard.append(["‚Ü©Ô∏è –ö –≤—ã–±–æ—Ä—É –ª–∏–Ω–∏–∏"])
    keyboard.append(["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(message_text, reply_markup=reply_markup)

    return next_step


async def handle_station_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    city = user_cities.get(user_id, "nsk")
    selected_station = update.message.text

    if selected_station == "‚Ü©Ô∏è –ö –≤—ã–±–æ—Ä—É –ª–∏–Ω–∏–∏":
        return await calculate_time(update, context)

    if selected_station == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await show_main_menu(update, context)

    current_line = context.user_data.get('start_line')
    if selected_station not in CITY_LINES[city][current_line]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return SELECTING_STATION

    context.user_data['start_station'] = selected_station

    lines = list(CITY_LINES[city].keys())
    keyboard = []

    for i in range(0, len(lines), 2):
        row = lines[i:i + 2]
        keyboard.append(row)

    keyboard.append(["‚Ü©Ô∏è –ù–∞–∑–∞–¥"])

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–Ω–∏—é –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏:",
        reply_markup=reply_markup
    )

    context.user_data['step'] = 'select_end_line'
    return SELECTING_LINE


async def handle_end_station_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    city = user_cities.get(user_id, "nsk")
    selected_station = update.message.text

    if selected_station == "‚Ü©Ô∏è –ö –≤—ã–±–æ—Ä—É –ª–∏–Ω–∏–∏":
        lines = list(CITY_LINES[city].keys())
        keyboard = []

        for i in range(0, len(lines), 2):
            row = lines[i:i + 2]
            keyboard.append(row)

        keyboard.append(["‚Ü©Ô∏è –ù–∞–∑–∞–¥"])

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–Ω–∏—é –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏:",
            reply_markup=reply_markup
        )

        context.user_data['step'] = 'select_end_line'
        return SELECTING_LINE

    if selected_station == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await show_main_menu(update, context)

    current_line = context.user_data.get('end_line')
    if selected_station not in CITY_LINES[city][current_line]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return SELECTING_END_STATION

    context.user_data['end_station'] = selected_station

    start_station = context.user_data['start_station']
    end_station = context.user_data['end_station']

    try:
        response = requests.get(
            f"{API_URL}/?city={city}&start={start_station}&finish={end_station}",
            timeout=30
        )

        if response.status_code == 200:
            data = response.json()
            time_minutes = data['time']
            way = " ‚Üí ".join(data['way'])

            result_text = (
                f"üöá <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {start_station} ‚Üí {end_station}\n"
                f"‚è± <b>–í—Ä–µ–º—è –≤ –ø—É—Ç–∏:</b> {time_minutes} –º–∏–Ω—É—Ç\n"
                f"üìç <b>–ü—É—Ç—å:</b> {way}\n\n"
                f"üèô <b>–ì–æ—Ä–æ–¥:</b> {get_city_name(city)}"
            )
        else:
            result_text = "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞–Ω—Ü–∏–π."

    except requests.exceptions.RequestException:
        result_text = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    context.user_data.clear()

    keyboard = [
        ["üöá –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
        ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(result_text, reply_markup=reply_markup, parse_mode='HTML')
    return SELECTING_ACTION


async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        ["–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"],
        ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    user_id = update.effective_user.id
    current_city = user_cities.get(user_id, "nsk")

    await update.message.reply_text(
        f"–¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {get_city_name(current_city)}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=reply_markup
    )

    return SELECTING_ACTION


async def change_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    city_name = update.message.text

    if city_name == "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫":
        user_cities[user_id] = "nsk"
    elif city_name == "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥":
        user_cities[user_id] = "spb"
    elif city_name == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        return await show_main_menu(update, context)
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥.")
        return SELECTING_ACTION

    keyboard = [
        ["üöá –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
        ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        f"‚úÖ –ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {get_city_name(user_cities[user_id])}",
        reply_markup=reply_markup
    )

    return SELECTING_ACTION


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    help_text = (
        "ü§ñ <b>–ë–æ—Ç –º–µ—Ç—Ä–æ - –ø–æ–º–æ—â—å</b>\n\n"
        "üöá <b>–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è</b> - —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏\n"
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - —Å–º–µ–Ω–∞ –≥–æ—Ä–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫)\n"
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b> - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è'\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–Ω–∏—é –º–µ—Ç—Ä–æ\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "4. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏\n"
        "5. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
        "–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏! üéØ"
    )

    await update.message.reply_text(help_text, parse_mode='HTML')
    return SELECTING_ACTION


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        ["üöá –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
        ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    user_id = update.effective_user.id
    current_city = user_cities.get(user_id, "nsk")

    await update.message.reply_text(
        f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {get_city_name(current_city)}",
        reply_markup=reply_markup
    )

    context.user_data.clear()
    return SELECTING_ACTION


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await show_main_menu(update, context)


def get_city_name(city_code: str) -> str:
    return {
        "nsk": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
        "spb": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
    }.get(city_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")


def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_ACTION: [
                MessageHandler(filters.Regex('^üöá –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è$'), calculate_time),
                MessageHandler(filters.Regex('^‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏$'), settings),
                MessageHandler(filters.Regex('^‚ÑπÔ∏è –ü–æ–º–æ—â—å$'), help_command),
                MessageHandler(filters.Regex('^(–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫|–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥|‚Ü©Ô∏è –ù–∞–∑–∞–¥)$'), change_city),
            ],
            SELECTING_LINE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_line_selection),
            ],
            SELECTING_STATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_station_selection),
            ],
            SELECTING_END_STATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_end_station_selection),
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()